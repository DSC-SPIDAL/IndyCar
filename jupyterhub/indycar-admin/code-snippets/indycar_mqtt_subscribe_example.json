{
  "display_name": "IndyCar Mqtt Subscribe Example",
  "metadata": {
    "code": [
      "import paho.mqtt.client as mqtt",
      "",
      "# The callback for when the client receives a CONNACK response from the server.",
      "",
      "def probe_topic(topics=None):",
      "    # subscribe to all the topics if no paramater provided",
      "    if topics is None:",
      "        topics = [\"#\"]",
      "    # convert to list if string",
      "    elif isinstance(topics, str):",
      "        topics = [topics]",
      "    def on_connect(client, userdata, flags, rc):",
      "        print(\"Connected with result code \"+str(rc))",
      "        for topic in topics:",
      "            client.subscribe(topic)",
      "",
      "    # The callback for when a PUBLISH message is received from the server.",
      "    def on_message(client, userdata, msg):",
      "        # just prints the data when a new data arrives",
      "        print(msg.topic+\" \"+str(msg.payload.decode(\"utf-8\")))",
      "        ",
      "    client = mqtt.Client(\"sample-client\")",
      "    client.on_connect = on_connect",
      "    client.on_message = on_message",
      "    client.username_pw_set(\"admin\", \"password\")",
      "    client.connect(\"activemq-apollo.default.svc.cluster.local\", 61613, 60)",
      "",
      "    return client",
      "",
      "stream = probe_topic(\"201727\")",
      "",
      "# subscribe to multiple topics",
      "# stream = probe_topic([\"201727\", \"201788\"])",
      "",
      "# subscribe the all topics",
      "# stream = probe_topic()",
      "",
      "",
      "# this cell will run until it is stopped",
      "stream.loop_start()",
      "# to stop call stream.loop_stop() in another cell"
    ],
    "language": "Python",
    "description": "The example shows how to get data from the Pub/Sub Broker"
  },
  "schema_name": "code-snippet"
}
